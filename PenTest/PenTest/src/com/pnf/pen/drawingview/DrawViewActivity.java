package com.pnf.pen.drawingview;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.res.Configuration;
import android.graphics.PointF;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.widget.ImageView;

import com.pnf.bt.lib.PNFDefine;
import com.pnf.bt.lib.PenDataClass;
import com.pnf.pen.test.MainDefine;
import com.pnf.pen.test.R;

public class DrawViewActivity extends Activity {
	ImageView drawViewBGImgView;
	DrawView drawView;
	
	boolean isHasFocus = false;
	
	@Override
	public void onResume() {
		super.onResume();
		
		if(MainDefine.penController != null){
			MainDefine.penController.SetRetObjForEnv(null);
			MainDefine.penController.SetRetObjForDI(null);
			MainDefine.penController.SetRetObjForFunc(null);
		}
		
		MainDefine.SetRetObj(penHandler);
		MainDefine.SetRetObjForMsg(null);
	}
	
	@Override
	public void onPause() {
		super.onPause();
	}
	
	@Override
	public void onDestroy() {
		super.onDestroy();
	}
	
	@Override
	public void onConfigurationChanged(Configuration newConfig){
		super.onConfigurationChanged(newConfig);
	}
	
	@Override
	public void onUserLeaveHint() {
		super.onUserLeaveHint();
	}
	
	@Override
    public void onWindowFocusChanged(boolean hasFocus) {
		isHasFocus = hasFocus;
    }
	
	@Override
	public void onBackPressed()
	{
		setResult(RESULT_CANCELED ,null);
		finish();
		return;
	}
	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) 
	{
		if(keyCode == KeyEvent.KEYCODE_MENU){
			return true;
		}

		return super.onKeyDown(keyCode, event);
	}
	
	
	@Override
	public void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		
		setContentView(R.layout.drawview);
		
		drawViewBGImgView = (ImageView) findViewById(R.id.drawViewBGImgView);
		drawView = (DrawView) findViewById(R.id.drawView);
	}
	
	public void ClearAllBtnClicked(View v){
		drawView.btnEraser();
	}

	public void CloseBtnClicked(View v){
		setResult(RESULT_CANCELED ,null);
		finish();
	}
	
	@SuppressLint("HandlerLeak")
	Handler penHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			PenDataClass penData = (PenDataClass)msg.obj;
			
			if(penData != null){
				PenHandlerWithDictionary(penData);
			}
		}
	};
	
	void PenHandlerWithDictionary(PenDataClass penData)
	{
		if(!isHasFocus) return;
		
		PointF penConvPos = MainDefine.penController.getCoordinatePostionXY(penData.ptRaw.x ,penData.ptRaw.y ,penData.bRight);
		
		/*
		 * MARKER PEN STATE
		 */
		switch(penData.MakerPenStatus){
		case PNFDefine.MARKERPEN_RED_MARKER:
			drawView.setPenMode(getResources().getColor(R.color.marker_color_red));
			break;
		case PNFDefine.MARKERPEN_GREEN_MARKER:
			drawView.setPenMode(getResources().getColor(R.color.marker_color_green));
			break;
		case PNFDefine.MARKERPEN_YELLOW_MARKER:
			drawView.setPenMode(getResources().getColor(R.color.marker_color_yellow));
			break;
		case PNFDefine.MARKERPEN_BLUE_MARKER:
			drawView.setPenMode(getResources().getColor(R.color.marker_color_blue));
			break;
		case PNFDefine.MARKERPEN_PURPLE_MARKER:
			drawView.setPenMode(getResources().getColor(R.color.marker_color_purple));
			break;
		case PNFDefine.MARKERPEN_BLACK_MARKER:
			drawView.setPenMode(getResources().getColor(R.color.marker_color_black));
			break;
		case PNFDefine.MARKERPEN_ERASER_CAP:
			drawView.setEraserMode(false);
			break;
		case PNFDefine.MARKERPEN_LOW_BATTERY:
			break;
		case PNFDefine.MARKERPEN_BIG_ERASER:
			drawView.setEraserMode(true);
			break;
		}
		
		switch(penData.PenStatus)
		{
		case PNFDefine.PEN_DOWN:
			drawView.DoMouseDown(penConvPos.x ,penConvPos.y);
			break;
		case PNFDefine.PEN_MOVE:
			drawView.DoMouseDragged(penConvPos.x ,penConvPos.y);
			drawView.invalidatePath();
			break;
		case PNFDefine.PEN_UP:
			drawView.DoMouseUp(penConvPos.x ,penConvPos.y);
			drawView.invalidatePath();
			break;
		}
	}
}
