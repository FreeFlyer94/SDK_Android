package com.pnf.pen.test;

import java.util.Timer;
import java.util.TimerTask;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.PointF;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.PowerManager;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewStub;
import android.widget.Button;
import android.widget.ScrollView;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;
import android.widget.Toast;

import com.pnf.bt.lib.PNFDefine;
import com.pnf.bt.lib.PenDataClass;
import com.pnf.bt.lib.PenEnvDataClass;
import com.pnf.pen.calibration.CalibrationPointActivity;
import com.pnf.pen.dataimport.DataImportActivity;
import com.pnf.pen.drawingview.DrawViewActivity;

public class MainActivity extends Activity{
	PowerManager.WakeLock mWakeLock;
	
	final byte SLEEPVIEW_SHOWPOPUP = 0x00;
	final byte SLEEPVIEW_CLOSEPOPUP = 0x01;
	final byte SLEEPVIEW_STARTPOPUP = 0x02;
	
	final byte REQUEST_DRAWVIEW = 0x00;
	final byte REQUEST_CALIBRATIONVIEW = 0x01;
	final byte REQUEST_IMPORTDATA = 0x02;
	
	final byte ALERTVIEW_APP_EXIT = 0x00;
	
	final int HARDWARE_SUB_COUNT = 4;
	final int STATUS_SUB_COUNT = 6;
	final int SMARTMARKER_SUB_COUNT = 5;
	final int BATTERY_SUB_COUNT = 2;
	final int COUNT_SUB_COUNT = 3;
	final int PACKET_SUB_COUNT = 2;
	
	/*
	 * HARDWARE SUB TEXT
	 */
	final int HARDWARE_SUB_MODEL_CODE = 0;
	final int HARDWARE_SUB_HARDWARE_VERSION = 1;
	final int HARDWARE_SUB_MCU1_VERSION = 2;
	final int HARDWARE_SUB_MCU2_VERSION = 3;
	
	/*
	 * STATUS SUB TEXT
	 */
	final int STATUS_SUB_STATUS = 0;
	final int STATUS_SUB_RAW_POINT = 1;
	final int STATUS_SUB_CONV_POINT = 2;
	final int STATUS_SUB_PRESSURE = 3;
	final int STATUS_SUB_TEMPERATURE = 4;
	final int STATUS_SUB_ALIVE_SEC = 5;
	
	/*
	 * SMARTMARKER SUB TEXT
	 */
	final int SMARTMARKER_SUB_DIRECTION = 0;
	final int SMARTMARKER_SUB_FLAG = 1;
	final int SMARTMARKER_SUB_AUDIO_MODE = 2;
	final int SMARTMARKER_SUB_VOLUME = 3;
	final int SMARTMARKER_SUB_PROPERTIES = 4;
	
	/*
	 * BATTERY SUB TEXT
	 */
	final int BATTERY_SUB_STATION = 0;
	final int BATTERY_SUB_PEN = 1;
	
	/*
	 * COUNT SUB TEXT
	 */
	final int COUNT_SUB_STATE = 0;
	final int COUNT_SUB_TOTAL = 1;
	final int COUNT_SUB_BYTE = 2;
	
	/*
	 * PACKET SUB TEXT
	 */
	final int PACKET_SUB_ERROR_COUNT = 0;
	final int PACKET_SUB_TOTAL = 1;
	
	ScrollView writeLogScrollView;
	TextView writeLogTextView;
	
	Object[] hardwareSubText = new Object[HARDWARE_SUB_COUNT];
	Object[] statusSubText = new Object[STATUS_SUB_COUNT];
	Object[] smartMarkerSubText = new Object[SMARTMARKER_SUB_COUNT];
	Object[] batterySubText = new Object[BATTERY_SUB_COUNT];
	Object[] countSubText = new Object[COUNT_SUB_COUNT];
	Object[] packetSubText = new Object[PACKET_SUB_COUNT];
	
	boolean isHasFocus = false;
	
	boolean isShowRmdError = false;
	
	int temperatureCnt = 0;
	int packetCnt = 0;
	int penDownCnt = 0;
	int penMoveCnt = 0;
	int penUpCnt = 0;
	
	int rmdErrorCnt = 0;
	
	@Override
	public void onResume() {
		super.onResume();
		
		if(MainDefine.penController != null){
			MainDefine.penController.SetRetObjForEnv(PenHandlerEnv);
			MainDefine.penController.SetRetObjForDI(PenHandlerDI);
			MainDefine.penController.SetRetObjForFunc(PenHandlerFunc);
		}
		
		MainDefine.SetRetObj(penHandler);
		MainDefine.SetRetObjForMsg(messageHandler);
	}
	
	@Override
	public void onPause() {
		super.onPause();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		
		stopPenAliveTimer();
	}

	@Override
	public void onUserLeaveHint() {
		super.onUserLeaveHint();
	}
	
	@Override
    public void onWindowFocusChanged(boolean hasFocus) {
		isHasFocus = hasFocus;
    }

	@Override
	public void onBackPressed()
	{
		if(penSleepView.getVisibility() == View.VISIBLE){
			penSleepBtnClicked(null);
			return;
		}
		
		showAlertView(ALERTVIEW_APP_EXIT);
		return;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) 
	{
		if(keyCode == KeyEvent.KEYCODE_MENU){
			return true;
		}

		return super.onKeyDown(keyCode, event);
	}
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) 
	{
		switch(requestCode)
		{
		case REQUEST_DRAWVIEW:
			break;
		case REQUEST_CALIBRATIONVIEW:
			if(resultCode == Activity.RESULT_OK){
				MainDefine.calibrationMode = MainDefine.CALIBRATION_MODE_CUSTOM;
			}
			break;
		case REQUEST_IMPORTDATA:
			break;
		}
	}
	
    @SuppressLint("Wakelock")
	@Override
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        writeLogScrollView = (ScrollView) findViewById(R.id.writeLogScrollView);
        writeLogTextView = (TextView) findViewById(R.id.writeLogTextView);
        
        /*
    	 * HARDWARE SUB TEXT
    	 */
        hardwareSubText[0] = (TextView) findViewById(R.id.hardwareSub1Text);
        hardwareSubText[1] = (TextView) findViewById(R.id.hardwareSub2Text);
        hardwareSubText[2] = (TextView) findViewById(R.id.hardwareSub3Text);
        hardwareSubText[3] = (TextView) findViewById(R.id.hardwareSub4Text);
        
        /*
    	 * STATUS SUB TEXT
    	 */
        statusSubText[0] = (TextView) findViewById(R.id.statusSub1Text);
        statusSubText[1] = (TextView) findViewById(R.id.statusSub2Text);
        statusSubText[2] = (TextView) findViewById(R.id.statusSub3Text);
        statusSubText[3] = (TextView) findViewById(R.id.statusSub4Text);
        statusSubText[4] = (TextView) findViewById(R.id.statusSub5Text);
        statusSubText[5] = (TextView) findViewById(R.id.statusSub6Text);
        
        /*
    	 * SMARTMARKER SUB TEXT
    	 */
        smartMarkerSubText[0] = (TextView) findViewById(R.id.smartMarkerSub1Text);
        smartMarkerSubText[1] = (TextView) findViewById(R.id.smartMarkerSub2Text);
        smartMarkerSubText[2] = (Button) findViewById(R.id.smartMarkerSub3Btn);
        smartMarkerSubText[3] = (SeekBar) findViewById(R.id.smartMarkerSub4Seekbar);
        smartMarkerSubText[4] = (TextView) findViewById(R.id.smartMarkerSub5Text);
        
        /*
    	 * BATTERY SUB TEXT
    	 */
        batterySubText[0] = (TextView) findViewById(R.id.batterySub1Text);
        batterySubText[1] = (TextView) findViewById(R.id.batterySub2Text);
        
        /*
    	 * COUNT SUB TEXT
    	 */
        countSubText[0] = (TextView) findViewById(R.id.countSub1Text);
        countSubText[1] = (TextView) findViewById(R.id.countSub2Text);
        countSubText[2] = (TextView) findViewById(R.id.countSub3Text);
        
        /*
    	 * PACKET SUB TEXT
    	 */
        packetSubText[0] = (TextView) findViewById(R.id.packetSub1Text);
        packetSubText[1] = (TextView) findViewById(R.id.packetSub2Text);
        
    	penSleepView = ((ViewStub) findViewById(R.id.penSleepStub)).inflate();
    	
    	penSleepView.setVisibility(View.GONE);
    	isCheckSleepView = true;
    	
    	((SeekBar)smartMarkerSubText[SMARTMARKER_SUB_VOLUME]).setOnSeekBarChangeListener(mChangeListener);
    	
    	PowerManager powerManager = (PowerManager)getSystemService(Context.POWER_SERVICE);
		mWakeLock = powerManager.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, "My Tag");
		mWakeLock.acquire();
    }
    
    public void menuBtnClicked(View v){
    	menuBtnClicked(Integer.parseInt(v.getTag().toString()));
    }
    
    void menuBtnClicked(int btnTag){
    	if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_GO_DRAW)){
    		procDraw();
    	}else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_GO_CALIBRATION)){
    		procCalibration();
    	}
    	
    	
    	else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_PEN_STOP)){
    		procPenStop();
    	}else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_PEN_START)){
    		procPenStart();
    	}else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_PEN_DI)){
    		procPenDI();
    	}
    	
    	
    	else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_LOG_CLEAR)){
    		procLogClear();
    	}else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_LOG_PACKET_CLEAR)){
    		procLogPacketClear();
    	}else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_LOG_COUNT_CLEAR)){
    		procLogCountClear();
    	}else if(btnTag == getResInt(R.integer.MENU_BUTTON_ID_AUDIOMODE)){
    		procAudioModeChange();
    	}
    }
    
    void procDraw(){
    	Intent intent = new Intent(MainActivity.this, DrawViewActivity.class);
		startActivityForResult(intent, REQUEST_DRAWVIEW);
    }
    
    void procCalibration(){
    	if(MainDefine.penController == null) return;
    	
    	if(MainDefine.penController.isPenMode()){
    		if (MainDefine.penController.getModelCode() == 0) {
                addDebugText("smart pen");
            }
            else if (MainDefine.penController.getModelCode() == 1) {
            	addDebugText("lollol pen");
            }
            else if (MainDefine.penController.getModelCode() == 2) {
            	addDebugText("Equil SmartPen");
            }
            else if (MainDefine.penController.getModelCode() == 3) {
            	addDebugText("Equil SmartPen2");
            }
            else if (MainDefine.penController.getModelCode() == 4) {
            	addDebugText("Smart Maker");
            }
    	}
    	
    	Intent intent = new Intent(MainActivity.this, CalibrationPointActivity.class);
		startActivityForResult(intent, REQUEST_CALIBRATIONVIEW);
    }
    
    
    /*
     * pen
     */
    void procPenStop(){
    	if(MainDefine.penController == null) return;
    	
    	addDebugText("stop pen");
		MainDefine.penController.stopPen();
    }
    
    void procPenStart(){
    	if(MainDefine.penController == null) return;
    	
    	addDebugText("start pen");
		MainDefine.penController.restartPen();
    }
    
    void procPenDI(){
//    	if(MainDefine.penController == null) return;
//    	
//    	if(MainDefine.penController.isPenMode())
//    	{
//    		Intent intent = new Intent(MainActivity.this, DataImportActivity.class);
//    		startActivityForResult(intent, REQUEST_IMPORTDATA);
//    	}
    }
    
    /*
     * log
     */
    void procLogClear(){
    	writeLogTextView.setText("");
    }
    
    void procLogPacketClear(){
    	packetCnt = 0;
    	rmdErrorCnt = 0;
    	
    	packetTextErrorCountUpdate(rmdErrorCnt);
    	packetTextTotalUpdate(packetCnt);
    }
    
    void procLogCountClear(){
    	penDownCnt = 0;
    	penMoveCnt= 0;
    	penUpCnt = 0;
    	
    	countTextUpdate(penDownCnt, penMoveCnt, penUpCnt);
    }
    
    void procAudioModeChange(){
    	if(MainDefine.penController == null){
			
		}else{
			int modelCode = MainDefine.penController.getModelCode();
			
			if(modelCode < 4){
				
			}else{
				int audioMode = 0;
				if(MainDefine.penController.getAudioMode() == 0){
					audioMode = 1;
				}
				changeAudioMode((byte) audioMode);
				
				smartmarkerTextAudioModeUpdate();
			}
		}
    }
    
    
    void showAlertView(int alertTag){
    	AlertDialog.Builder builder = null;
    	AlertDialog alert = null;
    	
    	builder = new AlertDialog.Builder(MainActivity.this);
    	builder.setCancelable(false);
    	
    	switch(alertTag)
    	{
    	case ALERTVIEW_APP_EXIT:
    		builder.setTitle(getResources().getString(R.string.QUIL_APP));
        	builder.setPositiveButton(getResources().getString(R.string.COMMON_OK), new DialogInterface.OnClickListener() {
        		public void onClick(DialogInterface dialog, int which) {
        			dialog.dismiss();
        			
        			setResult(RESULT_OK ,null);
        			finish();
        		}
        	});
        	builder.setNegativeButton(getResources().getString(R.string.COMMON_CANCEL), new DialogInterface.OnClickListener() {
        		public void onClick(DialogInterface dialog, int which) {
        			dialog.dismiss();
        		}
        	});
    		break;
    	}
    	
    	alert = builder.create();
    	alert.show();
	}
    
    
    void addDebugText(String text) {
    	String orgText = writeLogTextView.getText().toString();
    	String inputText = "";
    	if(orgText.isEmpty()){
    		inputText = text;
    	}else{
    		inputText = orgText + "\n" + text;
    	}
    	
    	writeLogTextView.setText(inputText);
    	writeLogScrollView.post(new Runnable() {       
    		@Override
    		public void run() {
    			writeLogScrollView.fullScroll(View.FOCUS_DOWN);              
    		}
    	});
    }
    
    int getResInt(int id){
		return getResources().getInteger(id);
	}
    
    /*
     * PEN_DOWN
     * PEN_MOVE
     * PEN_UP
     * PEN_HOVER
     * PEN_HOVER_DOWN
     * PEN_HOVER_MOVE
     */
    @SuppressLint("HandlerLeak")
	Handler penHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			PenDataClass penData = (PenDataClass)msg.obj;
			if(penData != null){
				PenHandlerWithDictionary(penData);
			}
		}
	};
	
	void PenHandlerWithDictionary(PenDataClass penData)
	{
		penPopupHandler.sendEmptyMessage(SLEEPVIEW_STARTPOPUP);
		
		if (MainDefine.penController == null) {
	        addDebugText("PenController is not set");
	        return;
	    }
		
		PointF ptConv = MainDefine.penController.getCoordinatePostionXY(penData.ptRaw.x ,penData.ptRaw.y ,penData.bRight);
		int penTemperature = penData.Temperature;
		int penPressure = penData.pressure;
		
		/*
		 * temperature rmd error
		 */
		if (penTemperature <= 10) {
	        temperatureCnt++;
	        if (temperatureCnt >= 1000) {
	            temperatureCnt = 0;
	            Toast.makeText(
						getApplicationContext(),
						getResources().getString(R.string.PEN_TEMP_ERROR_MSG),
						Toast.LENGTH_SHORT)
					.show();
	        }
	    }
	    else {
	        temperatureCnt = 0;
	    }
		
		if(penData.PenStatus == PNFDefine.PEN_DOWN || 
				penData.PenStatus == PNFDefine.PEN_MOVE || 
						penData.PenStatus == PNFDefine.PEN_UP){
			//펜 데이타
			statusTextStatusUpdate(penData.PenStatus);
			smartmarkerTextFlagUpdate(penData.bRight);
		}else{
			statusTextStatusUpdate(4);
		}
		
		statusTextRawUpdate(penData.ptRaw.x, penData.ptRaw.y);
		statusTextConvUpdate(ptConv.x, ptConv.x);
		statusTextPressureUpdate(penPressure);
		statusTextTemperatureUpdate(penTemperature);
		
		
		packetCnt++;
		packetTextTotalUpdate(packetCnt);
		
		
		/*
		 * MARKER PEN STATE
		 */
		switch(penData.MakerPenStatus){
		case PNFDefine.MARKERPEN_RED_MARKER:
			//FFff0000
			smartmarkerTextPropertiesUpdate("red");
			break;
		case PNFDefine.MARKERPEN_GREEN_MARKER:
			//FF3cb878
			smartmarkerTextPropertiesUpdate("green");
			break;
		case PNFDefine.MARKERPEN_YELLOW_MARKER:
			//FFffff00
			smartmarkerTextPropertiesUpdate("yellow");
			break;
		case PNFDefine.MARKERPEN_BLUE_MARKER:
			//FF0000ff
			smartmarkerTextPropertiesUpdate("blue");
			break;
		case PNFDefine.MARKERPEN_PURPLE_MARKER:
			//FF800080
			smartmarkerTextPropertiesUpdate("purple");
			break;
		case PNFDefine.MARKERPEN_BLACK_MARKER:
			//FF000000
			smartmarkerTextPropertiesUpdate("black");
			break;
		case PNFDefine.MARKERPEN_ERASER_CAP:
			smartmarkerTextPropertiesUpdate("eraser cap");
			break;
		case PNFDefine.MARKERPEN_LOW_BATTERY:
			smartmarkerTextPropertiesUpdate("low battery");
			break;
		case PNFDefine.MARKERPEN_BIG_ERASER:
			smartmarkerTextPropertiesUpdate("eraser big");
			break;
		}
		switch(penData.PenStatus)
		{	
		case PNFDefine.PEN_DOWN:
			penDownCnt++;
			
			countTextUpdate(penDownCnt ,penMoveCnt ,penUpCnt);
			break;
		case PNFDefine.PEN_MOVE:
			penMoveCnt++;
			
			countTextUpdate(penDownCnt ,penMoveCnt ,penUpCnt);
			break;
		case PNFDefine.PEN_UP:
			penUpCnt++;
			
			countTextUpdate(penDownCnt ,penMoveCnt ,penUpCnt);
			break;
			
			
		case PNFDefine.PEN_HOVER:
			break;
		case PNFDefine.PEN_HOVER_DOWN:
			break;
		case PNFDefine.PEN_HOVER_MOVE:
			break;
		}
	}
	
	View penSleepView;
	
	boolean isCheckSleepView = false;
	final int penSleepDelay = 600;
	int savePenSleepRemainingTime;
	int savePenAliveSec;
	int curPenAliveSec;
	int penCheckAliveCnt;
	
	Timer penAliveTimer = null;
	
	
	/*
	 * PNF_ENV_DATA
	 */
	@SuppressLint("HandlerLeak")
	Handler PenHandlerEnv = new Handler() 
	{
		@Override
		public void handleMessage(Message msg) 
		{
			onPenEnvEvent(msg.what ,msg.obj);
		}
	};
	
	void onPenEnvEvent(int what ,Object obj)
	{
		switch(what)
		{
		case PNFDefine.PNF_ENV_DATA:
			addDebugText("PNF_ENV_DATA");
			PenEnvDataClass penEnvData = (PenEnvDataClass)obj;
			
			curPenAliveSec = penEnvData.penAliveSec;
			
			if(MainDefine.penController.getMCU1() >= 2 && MainDefine.penController.getMCU2() >= 2 && MainDefine.penController.getHWVersion() >= 2){
				if(curPenAliveSec > 0){
					if(penSleepView.getVisibility() == View.VISIBLE){
						penSleepView.setVisibility(View.GONE);
					}
				}
			}
			
			if(isCheckSleepView){
				if(penAliveTimer == null) {
			        penAliveTimer = new Timer();
			        TimerTask penAliveTask = new TimerTask() {
						@Override
						public void run() {
							onTimerForPenAlive();
						}
					};
					penAliveTimer.schedule(penAliveTask, 1000 ,1000);
					
			        savePenSleepRemainingTime = (int) MainDefine.GetCurrentSec() + penSleepDelay;
			        savePenAliveSec = penSleepDelay;
			        curPenAliveSec = penSleepDelay;
			    }
			}
			
			statusTextAliveSecUpdate(curPenAliveSec);
			break;
		}
		
		packetCnt++;
		packetTextTotalUpdate(packetCnt);
	}
	
	/*
	 * PEN_DI_DATA
	 * PEN_DI_TEMPLETE
	 * PEN_DI_ACC_DATA
	 * PEN_DI_DELETE
	 * PNF_DI_START
	 * PNF_DI_STOP
	 * PNF_DI_OK
	 * PNF_DI_FAIL
	 * PNF_DI_TEMP_EXIST
	 * PNF_DI_TEMP_FILE_COMPLETE
	 * PNF_DI_FILE_LIST_COMPLETE
	 */
	@SuppressLint("HandlerLeak")
	Handler PenHandlerDI = new Handler() 
	{
		@Override
		public void handleMessage(Message msg) 
		{
			onPenDIEvent(msg.what ,msg.arg1 ,msg.obj);
		}
	};
	
	void onPenDIEvent(int what ,int diPapersize ,Object obj)
	{
		switch(what)
		{
		case PNFDefine.PEN_DI_DATA:
			addDebugText("PEN_DI_DATA");
			break;
		case PNFDefine.PEN_DI_TEMPLETE:
			addDebugText("PEN_DI_TEMPLETE");
			break;
		case PNFDefine.PEN_DI_ACC_DATA:
			addDebugText("PEN_DI_ACC_DATA");
			break;
		case PNFDefine.PEN_DI_DELETE:
			addDebugText("PEN_DI_DELETE");
			break;
		case PNFDefine.PNF_DI_START:
			addDebugText("PNF_DI_START");
			break;
		case PNFDefine.PNF_DI_STOP:
			addDebugText("PNF_DI_STOP");
			break;
		case PNFDefine.PNF_DI_OK:
			addDebugText("PNF_DI_OK");
			break;
		case PNFDefine.PNF_DI_FAIL:
			addDebugText("PNF_DI_FAIL");
			break;
		case PNFDefine.PNF_DI_TEMP_EXIST:
			addDebugText("PNF_DI_TEMP_EXIST");
			break;
		case PNFDefine.PNF_DI_TEMP_FILE_COMPLETE:
			addDebugText("PNF_DI_TEMP_FILE_COMPLETE");
			
			MainDefine.penController.setDIFolderName();
			
			int fileCnt = MainDefine.penController.getDIFileCount();
			if(fileCnt > 0){
				addDebugText("dataimport has " + String.valueOf(fileCnt) + " file(s).");
			}
			break;
		case PNFDefine.PNF_DI_FILE_LIST_COMPLETE:
			addDebugText("PNF_DI_FILE_LIST_COMPLETE");
			break;
		}
		
		packetCnt++;
		packetTextTotalUpdate(packetCnt);
	}
	
	/*
	 * 
	 * BATTERY_INFO
	 * NEW_PAGE
	 * DUPLICATE_PAGE
	 * CHANGE_DEVECE_POSITION
	 * CHANGE_DEVECE_POSITION_FIRST
	 * 
	 */
	@SuppressLint("HandlerLeak")
	Handler PenHandlerFunc = new Handler() 
	{
		@Override
		public void handleMessage(Message msg) 
		{
			onPenFuncEvent(msg.what ,msg.arg1 ,msg.arg2);
		}
	};
	
	void onPenFuncEvent(int what ,int batteryStation ,int batteryPen)
	{
		switch(what)
		{
		case PNFDefine.BATTERY_INFO:
//			addDebugText("BATTERY_INFO");
			batteryTextStationUpdate(batteryStation);
			batteryTextPenUpdate(batteryPen);
			break;
		case PNFDefine.NEW_PAGE:
			addDebugText("NEW_PAGE");
			break;
		case PNFDefine.DUPLICATE_PAGE:
			addDebugText("DUPLICATE_PAGE");
			break;
		case PNFDefine.CHANGE_DEVECE_POSITION:
			addDebugText("CHANGE_DEVECE_POSITION");
			smartmarkerTextDirectionUpdate();
			break;
		case PNFDefine.CHANGE_DEVECE_POSITION_FIRST:
			addDebugText("CHANGE_DEVECE_POSITION_FIRST");
			smartmarkerTextDirectionUpdate();
			break;
		}
		
		packetCnt++;
		packetTextTotalUpdate(packetCnt);
	}
	
	void onTimerForPenAlive(){
		int curTime = (int) MainDefine.GetCurrentSec();
		
		boolean check = false;
		if(MainDefine.penController.getModelCode() == 2){
			if(MainDefine.penController.getMCU1() >= 2 && MainDefine.penController.getMCU2() >= 2 && MainDefine.penController.getHWVersion() >= 2){
				check = true;
			}
		}else if(MainDefine.penController.getModelCode() == 3){
			if(MainDefine.penController.getMCU1() >= 1 && MainDefine.penController.getMCU2() >= 1 && MainDefine.penController.getHWVersion() >= 1){
				check = true;
			}
		}else{
			return;
		}
		
		if(check){
			if(curPenAliveSec <= 0) {
				penPopupHandler.sendEmptyMessage(SLEEPVIEW_SHOWPOPUP);
				return;
			}else{
				penCheckAliveCnt = 0;
			}
			
			if(curPenAliveSec != 0){
				if(savePenAliveSec != curPenAliveSec){
					savePenAliveSec = curPenAliveSec;
					savePenSleepRemainingTime = (int) curTime+curPenAliveSec;
				}
			}
		}
		
		if(savePenSleepRemainingTime - curTime < 0) {
			penPopupHandler.sendEmptyMessage(SLEEPVIEW_SHOWPOPUP);
		}else{
			penCheckAliveCnt = 0;
		}
	}
	
	public void penSleepBtnClicked(View v){
		penPopupHandler.sendEmptyMessage(SLEEPVIEW_CLOSEPOPUP);
	}
	
	
	void stopPenAliveTimer(){
		isCheckSleepView = false;
		
		if(penAliveTimer != null){
    		penAliveTimer.cancel();
			penAliveTimer.purge();
			penAliveTimer = null;
    	}
	}
	
	@SuppressLint("HandlerLeak")
	Handler penPopupHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			switch(msg.what)
			{
			case SLEEPVIEW_SHOWPOPUP://슬핍 팝업창 호출
				if(++penCheckAliveCnt > 10){
					if(penSleepView.getVisibility() == View.GONE){
						penSleepView.setVisibility(View.VISIBLE);
					}
					
					stopPenAliveTimer();
				}
				break;
			case SLEEPVIEW_CLOSEPOPUP://X버튼으로 강제 닫기
				if(penSleepView.getVisibility() == View.VISIBLE){
					penSleepView.setVisibility(View.GONE);
				}
				
				stopPenAliveTimer();
				break;
			case SLEEPVIEW_STARTPOPUP://펜 입력으로 닫기
				if(penSleepView.getVisibility() == View.VISIBLE){
					penSleepView.setVisibility(View.GONE);
				}
				
				isCheckSleepView = true;
				if(curPenAliveSec != penSleepDelay){
					savePenSleepRemainingTime = (int) MainDefine.GetCurrentSec() + penSleepDelay;
			        savePenAliveSec = penSleepDelay;
			        curPenAliveSec = penSleepDelay;
				}
				break;
			}
		}
	};
	
	/*
	 * PNF_MSG_INVALID_PROTOCOL
	 * PNF_MSG_FAIL_LISTENING
	 * PNF_MSG_CONNECTING_FAIL
	 * PNF_MSG_CONNECTING
	 * PNF_MSG_CONNECTED
	 * PNF_MSG_PEN_RMD_ERROR
	 * PNF_MSG_FIRST_DATA_RECV
	 * PNF_MSG_FIRST_DATA_ERROR
	 * PNF_MSG_SESSION_CONNECT
	 * PNF_MSG_SESSION_OPEN
	 * PNF_MSG_SESSION_CLOSED
	 * 
	 * GESTURE_RIGHT_LEFT
	 * GESTURE_LEFT_RIGHT
	 * GESTURE_CIRCLE_CLOCKWISE
	 * GESTURE_CIRCLE_COUNTERCLOCKWISE
	 * GESTURE_ZIGZAG
	 * GESTURE_CLICK
	 * GESTURE_DOUBLECLICK
	 * 
	 * PEN_E_NOT_CONNECTED
	 * PEN_E_INVALID_PROTOCOL
	 * PEN_E_FAIL_LISTENING
	 */
	@SuppressLint("HandlerLeak")
	Handler messageHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			FreeLogMsg(msg.what);
		}
	};
	
	void FreeLogMsg(int what)
	{
		Log.e("0515", "MainActivity onMessageEvent what==>"+what);
		
		/*
		 * BT STATUS
		 */
		if(what == PNFDefine.PNF_MSG_INVALID_PROTOCOL){
			addDebugText("PNF_MSG_INVALID_PROTOCOL");
		}else if(what == PNFDefine.PNF_MSG_FAIL_LISTENING){
			addDebugText("PNF_MSG_FAIL_LISTENING");
		}else if(what == PNFDefine.PNF_MSG_CONNECTING_FAIL){
			addDebugText("PNF_MSG_CONNECTING_FAIL");
		}else if(what == PNFDefine.PNF_MSG_CONNECTING){
			addDebugText("PNF_MSG_CONNECTING");
		}else if(what == PNFDefine.PNF_MSG_CONNECTED){
			addDebugText("PNF_MSG_CONNECTED");
		}else if(what == PNFDefine.PNF_MSG_PEN_RMD_ERROR){
			addDebugText("PNF_MSG_PEN_RMD_ERROR");
			showRMDError();
			
			rmdErrorCnt++;
			packetTextErrorCountUpdate(rmdErrorCnt);
		}else if(what == PNFDefine.PNF_MSG_FIRST_DATA_RECV){
			addDebugText("PNF_MSG_FIRST_DATA_RECV");
			
			hardwareTextModelCodeUpdate();
			hardwareTextHWVersionUpdate();
			hardwareTextMCU1VersionUpdate();
			hardwareTextMCU2VersionUpdate();
			
			smartmarkerTextDirectionUpdate();
			smartmarkerTextAudioModeUpdate();
            smartmarkerTextVolumeUpdate();
		}else if(what == PNFDefine.PNF_MSG_FIRST_DATA_ERROR){
			addDebugText("PNF_MSG_FIRST_DATA_ERROR");
		}
		
		/*
		 * SESSION STATUS
		 */
		else if(what == PNFDefine.PNF_MSG_SESSION_CONNECT){
			addDebugText("PNF_MSG_SESSION_CONNECT");
		}else if(what == PNFDefine.PNF_MSG_SESSION_OPEN){
			addDebugText("PNF_MSG_SESSION_OPEN");
		}else if(what == PNFDefine.PNF_MSG_SESSION_CLOSED){
			addDebugText("PNF_MSG_SESSION_CLOSED");
		}
		
		/*
		 * PNF_GESTURE
		 */
		else if(what == PNFDefine.GESTURE_RIGHT_LEFT){
			addDebugText("GESTURE_RIGHT_LEFT");
		}else if(what == PNFDefine.GESTURE_LEFT_RIGHT){
			addDebugText("GESTURE_LEFT_RIGHT");
		}else if(what == PNFDefine.GESTURE_CIRCLE_CLOCKWISE){
			addDebugText("GESTURE_CIRCLE_CLOCKWISE");
		}else if(what == PNFDefine.GESTURE_CIRCLE_COUNTERCLOCKWISE){
			addDebugText("GESTURE_CIRCLE_COUNTERCLOCKWISE");
		}else if(what == PNFDefine.GESTURE_ZIGZAG){
			addDebugText("GESTURE_ZIGZAG");
		}else if(what == PNFDefine.GESTURE_CLICK){
			addDebugText("GESTURE_CLICK");
		}else if(what == PNFDefine.GESTURE_DOUBLECLICK){
			addDebugText("GESTURE_DOUBLECLICK");
		}
		
		/*
		 * PEN ERROR MSG
		 */
		else if(what == PNFDefine.PEN_E_NOT_CONNECTED){
			addDebugText("PEN_E_NOT_CONNECTED");
		}else if(what == PNFDefine.PEN_E_INVALID_PROTOCOL){
			addDebugText("PEN_E_INVALID_PROTOCOL");
		}else if(what == PNFDefine.PEN_E_FAIL_LISTENING){
			addDebugText("PEN_E_FAIL_LISTENING");
		}
		
		packetCnt++;
		packetTextTotalUpdate(packetCnt);
	}
	
	void showRMDError(){
		if(isShowRmdError) return;
		
		isShowRmdError = true;
		
		Toast.makeText(
				getApplicationContext(),
				getResources().getString(R.string.PEN_RMD_ERROR_MSG),
				Toast.LENGTH_SHORT)
			.show();
		
		new Handler().postDelayed(new Runnable() {
			public void run() {
				isShowRmdError = false;
			}
		}, 5 * 1000);
	}
	
	/*
	 * HARDWARE TextView ui update
	 */
	void hardwareTextModelCodeUpdate(){
		int modelCode = 0;
		if(MainDefine.penController == null){
			modelCode = 0;
		}else{
			modelCode = MainDefine.penController.getModelCode();
		}
		
		((TextView)hardwareSubText[HARDWARE_SUB_MODEL_CODE]).setText(String.valueOf(modelCode));
	}
	
	void hardwareTextHWVersionUpdate(){
		int hwVersion = 0;
		if(MainDefine.penController == null){
			hwVersion = 0;
		}else{
			hwVersion = MainDefine.penController.getHWVersion();
		}
		
		((TextView)hardwareSubText[HARDWARE_SUB_HARDWARE_VERSION]).setText(String.valueOf(hwVersion));
	}
	
	void hardwareTextMCU1VersionUpdate(){
		int mcu1Version = 0;
		if(MainDefine.penController == null){
			mcu1Version = 0;
		}else{
			mcu1Version = MainDefine.penController.getMCU1();
		}
		
		((TextView)hardwareSubText[HARDWARE_SUB_MCU1_VERSION]).setText(String.valueOf(mcu1Version));
	}
	
	void hardwareTextMCU2VersionUpdate(){
		int mcu2Version = 0;
		if(MainDefine.penController == null){
			mcu2Version = 0;
		}else{
			mcu2Version = MainDefine.penController.getMCU2();
		}
		
		((TextView)hardwareSubText[HARDWARE_SUB_MCU2_VERSION]).setText(String.valueOf(mcu2Version));
	}
	
	/*
	 * STATUS TextView ui update
	 */
	void statusTextStatusUpdate(int _status){
		((TextView)statusSubText[STATUS_SUB_STATUS]).setText(String.valueOf(_status));
	}
	
	void statusTextRawUpdate(float _rawX ,float _rawY){
		String rawStr = String.valueOf(_rawX)+" ,"+String.valueOf(_rawY);
		((TextView)statusSubText[STATUS_SUB_RAW_POINT]).setText(rawStr);
	}
	
	void statusTextConvUpdate(float _convX ,float _convY){
		String convStr = String.valueOf(_convX)+" ,"+String.valueOf(_convY);
		((TextView)statusSubText[STATUS_SUB_CONV_POINT]).setText(convStr);
	}
	
	void statusTextPressureUpdate(int _pressure){
		((TextView)statusSubText[STATUS_SUB_PRESSURE]).setText(String.valueOf(_pressure));
	}
	
	void statusTextTemperatureUpdate(int _temperature){
		((TextView)statusSubText[STATUS_SUB_TEMPERATURE]).setText(String.valueOf(_temperature));
	}
	
	void statusTextAliveSecUpdate(int _alive){
		((TextView)statusSubText[STATUS_SUB_ALIVE_SEC]).setText(String.valueOf(_alive));
	}
	
	/*
	 * SMARTMARKER TextView ui update
	 */
	void smartmarkerTextDirectionUpdate(){
		String directionStr = "";
		if(MainDefine.penController == null){
			directionStr = "";
		}else{
			int modelCode = MainDefine.penController.getModelCode();
			
			if(modelCode < 4){
				directionStr = "top";
			}else{
				int stationPostion = MainDefine.penController.getStationPostion();
				if(stationPostion == PNFDefine.DIRECTION_TOP){
					directionStr = "top";
				}else if(stationPostion == PNFDefine.DIRECTION_BOTTOM){
					directionStr = "bottom";
				}else if(stationPostion == PNFDefine.DIRECTION_LEFT){
					directionStr = "left";
				}else{//PNFDefine.DIRECTION_RIGHT
					directionStr = "right";
				}
			}
		}
		
		((TextView)smartMarkerSubText[SMARTMARKER_SUB_DIRECTION]).setText(directionStr);
	}
	
	void smartmarkerTextFlagUpdate(boolean _flag){
		String flagStr = "";
		if(MainDefine.penController == null){
			flagStr = "";
		}else{
			int modelCode = MainDefine.penController.getModelCode();
			
			if(modelCode < 4){
				flagStr = "";
			}else{
				int stationPostion = MainDefine.penController.getStationPostion();
				if(stationPostion == PNFDefine.DIRECTION_TOP ||
						stationPostion == PNFDefine.DIRECTION_BOTTOM){
					flagStr = "";
				}else{
					if(_flag){
						flagStr = "right";
					}else{
						flagStr = "left";
					}
				}
			}
		}
		
		((TextView)smartMarkerSubText[SMARTMARKER_SUB_FLAG]).setText(flagStr);
	}
	
	void smartmarkerTextAudioModeUpdate(){
		String audioModeStr = "0";
		
		if(MainDefine.penController == null){
			audioModeStr = "0";
		}else{
			int modelCode = MainDefine.penController.getModelCode();
			
			if(modelCode < 4){
				audioModeStr = "0";
			}else{
				int mode = MainDefine.penController.getAudioMode();
				if(mode == 0){
					audioModeStr = "Beep";
				}else{
					audioModeStr = "Beep & Voice Prompts";
				}
			}
		}
		((Button)smartMarkerSubText[SMARTMARKER_SUB_AUDIO_MODE]).setText(audioModeStr);
	}
	
	void smartmarkerTextVolumeUpdate(){
		int audioVolum = 0;
		
		if(MainDefine.penController == null){
			audioVolum = 0;
		}else{
			int modelCode = MainDefine.penController.getModelCode();
			
			if(modelCode < 4){
				audioVolum = 0;
			}else{
				audioVolum = MainDefine.penController.getAudioVolum();
				if(audioVolum < 0){
	            	audioVolum += 256;
				}
			}
		}
		
		((SeekBar)smartMarkerSubText[SMARTMARKER_SUB_VOLUME]).setProgress(255-audioVolum);
		
//		((SeekBar)smartMarkerSubText[SMARTMARKER_SUB_VOLUME]).setText(String.valueOf(audioVolum));
	}
	
	SeekBar.OnSeekBarChangeListener mChangeListener = new OnSeekBarChangeListener() {
		
		@Override
		public void onStopTrackingTouch(SeekBar seekBar) {
			if(MainDefine.penController == null){
				
			}else{
				int modelCode = MainDefine.penController.getModelCode();
				
				if(modelCode < 4){
					
				}else{
					int audioVolum = 255 - ((SeekBar)smartMarkerSubText[SMARTMARKER_SUB_VOLUME]).getProgress();
					changeVolume((byte) audioVolum);
				}
			}
			
		}
		
		@Override
		public void onStartTrackingTouch(SeekBar seekBar) {
			
		}
		
		@Override
		public void onProgressChanged(SeekBar seekBar, int progress ,boolean fromUser) {
			
		}
	};
	
	void changeAudioMode(byte _mode)
	{
		MainDefine.penController.changeAudioMode(_mode);
	}
	
	void changeVolume(byte _volume)
	{
		MainDefine.penController.changeVolume(_volume);
	}
	
	void smartmarkerTextPropertiesUpdate(String _properties){
		((TextView)smartMarkerSubText[SMARTMARKER_SUB_PROPERTIES]).setText(_properties);
	}
	
	/*
	 * BATTERY TextView ui update
	 */
	void batteryTextStationUpdate(int _battery){
		String stationBatteryStr = "0";
		
		if(MainDefine.penController == null){
			stationBatteryStr = "0";
		}else{
			int modelCode = MainDefine.penController.getModelCode();
			
			if(modelCode < 3){
				stationBatteryStr = "0";
			}else{
				stationBatteryStr = String.valueOf(_battery)+"%";
			}
		}
		
		((TextView)batterySubText[BATTERY_SUB_STATION]).setText(stationBatteryStr);
	}
	
	void batteryTextPenUpdate(int _battery){
		String penBatteryStr = "0";
		
		if(MainDefine.penController == null){
			penBatteryStr = "0";
		}else{
			int modelCode = MainDefine.penController.getModelCode();
			
			if(modelCode < 3){
				penBatteryStr = "0";
			}else if(modelCode < 4){
				penBatteryStr = String.valueOf(_battery)+"%";
			}else{
				if(_battery == 0){
					penBatteryStr = "high";
				}else{
					penBatteryStr = "low";
				}
			}
		}
		
		((TextView)batterySubText[BATTERY_SUB_PEN]).setText(penBatteryStr);
	}
	
	/*
	 * COUNT TextView ui update
	 */
	void countTextUpdate(int _down ,int _move ,int _up){
		int total = _down+_move+_up;
		int byteTotal = ((total)*6)+((total)/12)+1;
		if(total == 0){
			byteTotal = 0;
		}
		
		String stateStr = String.valueOf(_down)+" ,"+String.valueOf(_move)+" ,"+String.valueOf(_up);
		String totalStr = String.valueOf(total);
		String byteStr = String.valueOf(byteTotal)+"("+String.valueOf(byteTotal/1024.f)+")";
		
		((TextView)countSubText[COUNT_SUB_STATE]).setText(String.valueOf(stateStr));
		((TextView)countSubText[COUNT_SUB_TOTAL]).setText(String.valueOf(totalStr));
		((TextView)countSubText[COUNT_SUB_BYTE]).setText(String.valueOf(byteStr));
	}
	
	/*
	 * PACKET TextView ui update
	 */
	void packetTextErrorCountUpdate(int _count){
		((TextView)packetSubText[PACKET_SUB_ERROR_COUNT]).setText(String.valueOf(_count));
	}
	
	void packetTextTotalUpdate(int _total){
		((TextView)packetSubText[PACKET_SUB_TOTAL]).setText(String.valueOf(_total));
	}
}
