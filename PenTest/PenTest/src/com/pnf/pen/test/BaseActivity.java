package com.pnf.pen.test;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Point;
import android.graphics.PointF;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.Toast;

import com.pnf.bt.lib.PNFDefine;
import com.pnf.bt.lib.PNFPenController;
import com.pnf.bt.lib.PenDataClass;

public class BaseActivity extends Activity {
	final String SYSTEM_DIALOG_REASON_KEY = "reason";
	final String SYSTEM_DIALOG_REASON_RECENT_APPS = "recentapps";
	final String SYSTEM_DIALOG_REASON_HOME_KEY = "homekey";
	
	final int REQUEST_MAIN = 1;
	
	runReadThread penReadThread = null;
	
	@Override
	protected void onResume() {
		super.onResume();
	}

	@Override
	protected void onPause() {
		super.onPause();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();

		unregisterReceiver(homeKeyReceiver);
		unregisterReceiver(keyGuardReceiver);
	}

	@Override
	protected void onUserLeaveHint() {
		super.onUserLeaveHint();
	}

	@Override
	public void onBackPressed()
	{
		return;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) 
	{
		if(keyCode == KeyEvent.KEYCODE_MENU){
			return true;
		}

		return super.onKeyDown(keyCode, event);
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) 
	{
		switch(requestCode)
		{
		case REQUEST_MAIN:
			if(resultCode == Activity.RESULT_OK){
				new Thread(new Runnable() {
					public void run() {
						runOnUiThread(new Runnable(){
							@Override
							public void run() {
								finish();
								android.os.Process.killProcess(android.os.Process.myPid());
							}
						});
					}
				}).start();
			}
			break;
		}
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);

		setContentView(R.layout.baseview);
		
		/*
    	 * LCD 크기 셋팅
    	 */
		Point LCDSize = new Point();
		((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getSize(LCDSize);
		MainDefine.iDisGetWidth = LCDSize.x;
		MainDefine.iDisGetHeight = LCDSize.y;
		
    	/*
    	 * 홈키 리시버 셋팅
    	 */
		IntentFilter filter = null;
		filter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
		registerReceiver(homeKeyReceiver, filter);
		
		/*
		 * 잠금 모드 리시버 셋팅
		 */
		filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
		filter.addAction( Intent.ACTION_SCREEN_OFF );
		registerReceiver(keyGuardReceiver, filter);
		
		/*
    	 * PNFBtLib 셋팅
    	 */
		if(MainDefine.penController == null){
			MainDefine.penController = new PNFPenController(getApplicationContext());
			
			MainDefine.penController.setConnectDelay(false);
			MainDefine.penController.setCalibration(getApplicationContext());
			MainDefine.penController.startPen();
			
			MainDefine.penController.SetRetObjForMsg(messageHandler);
		}
    	
		Intent intent = new Intent(BaseActivity.this, MainActivity.class);
		startActivityForResult(intent, REQUEST_MAIN);
	}
	
	
	void ReadThreadOff() {
	    if(penReadThread != null){
	    	penReadThread.cancel();
			
	    	penReadThread = null;
		}
	    
	    if (MainDefine.penController != null) {
	    	MainDefine.penController.EndReadQ();
	    }
	}
	
	void ReadThreadStart() {
	    if (penReadThread == null) {
	    	penReadThread = new runReadThread();
	    	penReadThread.start();
	    }
	    
	    if (MainDefine.penController != null) {
	    	MainDefine.penController.StartReadQ();
	    }
	}
	
	class runReadThread implements Runnable
	{
		final int RUNNING = 0;
		final int STOPPED = 1;
		int state = RUNNING; 
		Thread thread;
		int testCnt = 0;
		
		public runReadThread()
		{
			thread = new Thread(this);
        	state = RUNNING;
		}

		public void run() {
			while (state != STOPPED) {
				try {
					testCnt = 0;
					if(MainDefine.penHandler != null){
						synchronized (MainDefine.penHandler){
							testCnt = 1;
							PenDataClass penDataClass = MainDefine.penController.ReadQ();
							testCnt = 2;
							if(penDataClass != null){
								testCnt = 3;
								MainDefine.sendActivityPen(penDataClass);
								testCnt = 4;
							}
							testCnt = 5;
							Thread.sleep(10);
							testCnt = 6;
						}
					}
				} catch (Exception e) {
					Log.e("error", "runReadThread run testCnt==>"+testCnt);
					Log.e("error", "runReadThread run Exception : "+e);
				}
			}
		}

		public void cancel() {
			state = STOPPED;
		} 

		public void start() { 
			thread.start();
		}
	}
	
	
	/*
	 * PNF_MSG_INVALID_PROTOCOL
	 * PNF_MSG_FAIL_LISTENING
	 * PNF_MSG_CONNECTING_FAIL
	 * PNF_MSG_CONNECTING
	 * PNF_MSG_CONNECTED
	 * PNF_MSG_PEN_RMD_ERROR
	 * PNF_MSG_FIRST_DATA_RECV
	 * PNF_MSG_FIRST_DATA_ERROR
	 * PNF_MSG_SESSION_CONNECT
	 * PNF_MSG_SESSION_OPEN
	 * PNF_MSG_SESSION_CLOSED
	 * 
	 * GESTURE_RIGHT_LEFT
	 * GESTURE_LEFT_RIGHT
	 * GESTURE_CIRCLE_CLOCKWISE
	 * GESTURE_CIRCLE_COUNTERCLOCKWISE
	 * GESTURE_ZIGZAG
	 * GESTURE_CLICK
	 * GESTURE_DOUBLECLICK
	 * 
	 * PEN_E_NOT_CONNECTED
	 * PEN_E_INVALID_PROTOCOL
	 * PEN_E_FAIL_LISTENING
	 */
	@SuppressLint("HandlerLeak")
	Handler messageHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			FreeLogMsg(msg.what);
		}
	};
	
	void FreeLogMsg(int what)
	{
		if(what == PNFDefine.PNF_MSG_FAIL_LISTENING){
			showDisConnectPopup();
			
			ReadThreadOff();
		}else if(what == PNFDefine.PNF_MSG_FIRST_DATA_RECV){
			showConnectPopup();
			
			new Handler().postDelayed(new Runnable() {
				public void run() {
					lazyCheckCalibration();
					
					ReadThreadStart();
				}
			}, 1500);
		}
		
		MainDefine.sendActivityMessage(what);
	}
	
	void showConnectPopup(){
		if(MainDefine.penController == null) return;
		
		int modelCode = MainDefine.penController.getModelCode();
		
		Toast toastView = new Toast(getBaseContext());
		
		ImageView imgView = new ImageView(getBaseContext());
		
		if(modelCode < 4)
		{
			imgView.setImageResource(R.drawable.e08_connect);
		}else{
			imgView.setImageResource(R.drawable.e08_m_connect);
		}
		
		toastView.setView(imgView);
		
		toastView.setDuration(Toast.LENGTH_SHORT);
		toastView.setGravity(Gravity.CENTER, 0, 0);
		toastView.show();
		
//		if(MainDefine.penController.getFirmwareUpdate()){
//			FirmwareUpdateMessageBox();
//		}
	}
	
	void showDisConnectPopup(){
		if(MainDefine.penController == null) return;
		
		Toast toastView = new Toast(getBaseContext());
		 
		ImageView imgView = new ImageView(getBaseContext());
		
		int _lastModelCode = MainDefine.penController.getLastModelCode();
		
		if(_lastModelCode < 4)
		{
			imgView.setImageResource(R.drawable.e08_disconnect);
		}else{
			imgView.setImageResource(R.drawable.e08_m_disconnect);
		}
		
		toastView.setView(imgView);

		toastView.setDuration(Toast.LENGTH_LONG);
		toastView.setGravity(Gravity.CENTER, 0, 0);
		toastView.show();
	}
	
	boolean changeCalibrationMode()
	{
		if(MainDefine.penController == null) return false;
		
		boolean isRtn = false;
		
		int modelCode = MainDefine.penController.getModelCode();
		if(modelCode < 3){
			if(MainDefine.calibrationMode != MainDefine.CALIBRATION_MODE_SP){
				MainDefine.calibrationMode = MainDefine.CALIBRATION_MODE_SP;
				
				isRtn = true;
			}
		}else if(modelCode < 4){
			if(MainDefine.calibrationMode != MainDefine.CALIBRATION_MODE_SP2){
				MainDefine.calibrationMode = MainDefine.CALIBRATION_MODE_SP2;
				
				isRtn = true;
			}
		}else{
			int stationPostion = MainDefine.penController.getStationPostion();
			
			if(stationPostion == PNFDefine.DIRECTION_TOP){
				if(MainDefine.calibrationMode != MainDefine.CALIBRATION_MODE_SM_TOP){
					MainDefine.calibrationMode = MainDefine.CALIBRATION_MODE_SM_TOP;
					
					isRtn = true;
				}
			}else if(stationPostion == PNFDefine.DIRECTION_BOTTOM){
				if(MainDefine.calibrationMode != MainDefine.CALIBRATION_MODE_SM_BOTTOM){
					MainDefine.calibrationMode = MainDefine.CALIBRATION_MODE_SM_BOTTOM;
					
					isRtn = true;
				}
			}else{
				if(MainDefine.calibrationMode != MainDefine.CALIBRATION_MODE_SM_LEFT){
					MainDefine.calibrationMode = MainDefine.CALIBRATION_MODE_SM_LEFT;
					
					isRtn = true;
				}
			}
		}
		
		return isRtn;
	}
	
	/*
	 Smart pen 과 lollol펜의 모델코드가 다름
	 lollol펜의 모델코드 셋팅시간이 펜이 연결되고 1초후에 전송됨
	 그래서 1.5초의 딜레이를 줌
	 modelCode = 0 -> smart pen
	 modelCode = 1 -> lollol pen
	 modelCode = 2 -> Equil
	 */
	
	void lazyCheckCalibration()
	{
		if(MainDefine.penController == null) return;
		if(!changeCalibrationMode()) return;
		
		int modelCode = MainDefine.penController.getModelCode();
		
		PointF[] calScreenPoint = new PointF[4];
		PointF[] calResultPoint = new PointF[4];
		
		if(modelCode < 4){
			calResultPoint[0] = new PointF(MainDefine.caliSP_A4.left, MainDefine.caliSP_A4.top);
			calResultPoint[1] = new PointF(MainDefine.caliSP_A4.right, MainDefine.caliSP_A4.top);
			calResultPoint[2] = new PointF(MainDefine.caliSP_A4.right ,MainDefine.caliSP_A4.bottom);
			calResultPoint[3] = new PointF(MainDefine.caliSP_A4.left ,MainDefine.caliSP_A4.bottom);
		}else{
			int stationPostion = MainDefine.penController.getStationPostion();

			if(stationPostion == PNFDefine.DIRECTION_TOP){
				calResultPoint[0] = new PointF(MainDefine.caliSM_TOP_4X6.left, MainDefine.caliSM_TOP_4X6.top);
				calResultPoint[1] = new PointF(MainDefine.caliSM_TOP_4X6.right, MainDefine.caliSM_TOP_4X6.top);
				calResultPoint[2] = new PointF(MainDefine.caliSM_TOP_4X6.right ,MainDefine.caliSM_TOP_4X6.bottom);
				calResultPoint[3] = new PointF(MainDefine.caliSM_TOP_4X6.left ,MainDefine.caliSM_TOP_4X6.bottom);
			}else if(stationPostion == PNFDefine.DIRECTION_BOTTOM){
				calResultPoint[0] = new PointF(MainDefine.caliSM_BOTTOM_4X6.left, MainDefine.caliSM_BOTTOM_4X6.top);
				calResultPoint[1] = new PointF(MainDefine.caliSM_BOTTOM_4X6.right, MainDefine.caliSM_BOTTOM_4X6.top);
				calResultPoint[2] = new PointF(MainDefine.caliSM_BOTTOM_4X6.right ,MainDefine.caliSM_BOTTOM_4X6.bottom);
				calResultPoint[3] = new PointF(MainDefine.caliSM_BOTTOM_4X6.left ,MainDefine.caliSM_BOTTOM_4X6.bottom);
			}else{
				calResultPoint[0] = new PointF(MainDefine.caliSM_LEFT_8X5.left, MainDefine.caliSM_LEFT_8X5.top);
				calResultPoint[1] = new PointF(MainDefine.caliSM_LEFT_8X5.right, MainDefine.caliSM_LEFT_8X5.top);
				calResultPoint[2] = new PointF(MainDefine.caliSM_LEFT_8X5.right ,MainDefine.caliSM_LEFT_8X5.bottom);
				calResultPoint[3] = new PointF(MainDefine.caliSM_LEFT_8X5.left ,MainDefine.caliSM_LEFT_8X5.bottom);
			}
		}
		
		calScreenPoint[0] = new PointF(0.0f ,0.0f);
		calScreenPoint[1] = new PointF(MainDefine.iDisGetWidth ,0.0f);
		calScreenPoint[2] = new PointF(MainDefine.iDisGetWidth ,MainDefine.iDisGetHeight);
		calScreenPoint[3] = new PointF(0.0f ,MainDefine.iDisGetHeight);

		MainDefine.penController.setCalibrationData(calScreenPoint, 0, calResultPoint);
	}
	
//	void FirmwareUpdateMessageBox(){
//		Intent intent = new Intent(BaseActivity.this, FirmwareUpdatePopupViewActivity.class);
//		intent.putExtra("firmware", 2);
//		
//		startActivity(intent);
//	}
	
	BroadcastReceiver homeKeyReceiver = new BroadcastReceiver() {

		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if(action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)){
				String reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_KEY);
				if(reason != null){
					if(reason.equals(SYSTEM_DIALOG_REASON_HOME_KEY)){//onHomePressed
						Log.e("0704", "homeKeyReceiver onHomePressed~");
						MainDefine.penController.disconnectPen();
					}else if(reason.equals(SYSTEM_DIALOG_REASON_RECENT_APPS)){//onHomeLongPressed
						Log.e("0704", "homeKeyReceiver onHomeLongPressed~");
						MainDefine.penController.disconnectPen();
					}
				}
			}
		}
	};
	
	BroadcastReceiver keyGuardReceiver = new BroadcastReceiver() {
		
		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if(action.equals(Intent.ACTION_SCREEN_ON)){
				
			}else if(action.equals(Intent.ACTION_SCREEN_OFF)){
				MainDefine.penController.disconnectPen();
			}
		}
	};
}
