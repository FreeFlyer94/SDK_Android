package com.pnf.pen.calibration;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.PointF;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.KeyEvent;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.view.animation.TranslateAnimation;
import android.widget.FrameLayout;
import android.widget.ImageView;

import com.pnf.bt.lib.PNFDefine;
import com.pnf.bt.lib.PenDataClass;
import com.pnf.pen.test.MainDefine;
import com.pnf.pen.test.R;


public class CalibrationPointActivity extends Activity
{
	/*
	 * smart pen
	 */
	FrameLayout calib1Layer;
	ImageView[] caliPointImgView;
	
	ImageView caliStationTop;
	ImageView caliStationBottom;
	ImageView caliSize;
	
	/*
	 * smart marker
	 */
	FrameLayout calib2Layer;
	ImageView[] caliMarkerPointImgView;
	
	ImageView caliMarkerStationTop;
	ImageView caliMarkerStationLeft;
	ImageView caliMarkerStationBottom;
	ImageView caliMarkerSize;
	
	/*
	 * count popup
	 */
	ImageView caliShowPopup;
	
	PointF m_posCoordinate[] = null;
	PointF m_posRestultPoint[] = null;
	PointF m_posDrawCoordinate[] = null;
	
	int m_nCoordinateCounter;
	int m_nCoordinateDrawPoint;
	int m_nCoordinateResuntPoint;
	
	int markerStationPosition = PNFDefine.DIRECTION_LEFT;
	boolean isSmartPenMode = false;
	
	@Override
	public void onResume()
	{
		super.onResume();
		
		if(MainDefine.penController != null){
			MainDefine.penController.SetRetObjForEnv(null);
			MainDefine.penController.SetRetObjForDI(null);
			MainDefine.penController.SetRetObjForFunc(PenHandlerFunc);
		}
		
		MainDefine.SetRetObj(penHandler);
		MainDefine.SetRetObjForMsg(messageHandler);
	}
	
	@Override
	public void onPause() 
	{
		super.onPause();
	}
	
	@Override
	public void onStart(){//액티비티의 표시를 중단했을 때 불린다.
    	super.onStart();
    }
	
	
	
	@Override
	public void onDestroy()
    {
    	super.onDestroy();
    }
    
	boolean isHasFocus = false;
    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
    	isHasFocus = hasFocus;
    	if(m_posDrawCoordinate == null) initCoordinateData();
    	
    	if(isFirstActivitFocus){
    		isFirstActivitFocus = false;
    	}
    }
	
	
	@Override
	public void onBackPressed() 
	{
		if(isAnimation) return;
		if(!isHasFocus) return;
		if(isFirstActivitFocus) return;
		
		finishActivityAnim(RESULT_CANCELED,null);
		return;
	}
	
	@Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
		if(keyCode == KeyEvent.KEYCODE_MENU){
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

    
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		
	}
    
	@Override
	public void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		
		m_nCoordinateCounter = 0;
		m_nCoordinateDrawPoint = 2;
		m_nCoordinateResuntPoint = 4;
		
		caliPointImgView = new ImageView[m_nCoordinateResuntPoint];
		caliMarkerPointImgView = new ImageView[m_nCoordinateResuntPoint];
		
		setContentView(R.layout.calibration2point);
		
		/*
		 * smart pen
		 */
		calib1Layer = (FrameLayout)findViewById(R.id.calib1Layer);
		for(int i=0;i<m_nCoordinateDrawPoint;i++){
			String imgStr = "caliPoint"+(i+1)+"ImgView";
			caliPointImgView[i] = (ImageView) findViewById(ResourcesIdNameToId(imgStr));
		}
		
		caliStationTop = (ImageView)findViewById(R.id.caliStationTop);
		caliStationBottom = (ImageView)findViewById(R.id.caliStationBottom);
		caliSize = (ImageView)findViewById(R.id.caliSize);
		
		/*
		 * smart marker
		 */
		calib2Layer = (FrameLayout)findViewById(R.id.calib2Layer);
		for(int i=0;i<m_nCoordinateDrawPoint;i++){
			String imgStr = "caliMarkerPoint"+(i+1)+"ImgView";
			caliMarkerPointImgView[i] = (ImageView) findViewById(ResourcesIdNameToId(imgStr));
		}
		
		caliMarkerStationTop = (ImageView)findViewById(R.id.caliMarkerStationTop);
		caliMarkerStationLeft = (ImageView)findViewById(R.id.caliMarkerStationLeft);
		caliMarkerStationBottom = (ImageView)findViewById(R.id.caliMarkerStationBottom);
		caliMarkerSize = (ImageView)findViewById(R.id.caliMarkerSize);
		
		/*
		 * count popup
		 */
		caliShowPopup = (ImageView)findViewById(R.id.caliShowPopup);
		
		
		
		ChangeStation();
		
	}
		
	void ChangeStation()
	{
		if(MainDefine.penController == null) return;
		
		int modelCode = MainDefine.penController.getModelCode();
		
		if(modelCode < 4){
			isSmartPenMode = true;
			
			calib1Layer.setVisibility(View.VISIBLE);
			calib2Layer.setVisibility(View.GONE);
			
//			if(infoData.isStationUP){
//				caliStationTop.setVisibility(View.VISIBLE);
//				
//				caliStationBottom.setVisibility(View.GONE);
//			}else{
//				caliStationTop.setVisibility(View.GONE);
//				
//				caliStationBottom.setVisibility(View.VISIBLE);
//			}
			
			caliStationTop.setVisibility(View.VISIBLE);
			caliStationBottom.setVisibility(View.GONE);
		}else{
			isSmartPenMode = false;
			
			calib1Layer.setVisibility(View.GONE);
			calib2Layer.setVisibility(View.VISIBLE);
			
			int stationPostion = MainDefine.penController.getStationPostion();
			
			switch (stationPostion) {
			case PNFDefine.DIRECTION_TOP:
				markerStationPosition = PNFDefine.DIRECTION_TOP;
				
				caliMarkerSize.setImageResource(ResourcesImgNameToId("cali_sm_b_01"));
				
				caliMarkerStationTop.setVisibility(View.VISIBLE);
				
				caliMarkerStationLeft.setVisibility(View.GONE);
				caliMarkerStationBottom.setVisibility(View.GONE);
				break;
			case PNFDefine.DIRECTION_BOTTOM:
				markerStationPosition = PNFDefine.DIRECTION_BOTTOM;
				
				caliMarkerSize.setImageResource(ResourcesImgNameToId("cali_sm_b_01"));
				
				caliMarkerStationBottom.setVisibility(View.VISIBLE);
				
				caliMarkerStationTop.setVisibility(View.GONE);
				caliMarkerStationLeft.setVisibility(View.GONE);
				break;
			default://DIRECTION_LEFT ,DIRECTION_RIGHT
				markerStationPosition = PNFDefine.DIRECTION_LEFT;
				
				caliMarkerSize.setImageResource(ResourcesImgNameToId("cali_sm_b_02"));
				
				caliMarkerStationLeft.setVisibility(View.VISIBLE);
				
				caliMarkerStationTop.setVisibility(View.GONE);
				caliMarkerStationBottom.setVisibility(View.GONE);
				break;
			}
		}
		
		
		if(modelCode == 4){
			
		}else{
			
		}
	}
    
    public void initCoordinateData(){
    	m_posDrawCoordinate = new PointF[m_nCoordinateDrawPoint];
    	
    	if(isSmartPenMode){
    		for(int i=0;i<m_nCoordinateDrawPoint;i++){
        		Rect rectGlobal = getGlobalVisibleRect(caliPointImgView[i]);
        		m_posDrawCoordinate[i] = new PointF(rectGlobal.centerX(), rectGlobal.centerY());
        	}
    	}else{
    		for(int i=0;i<m_nCoordinateDrawPoint;i++){
        		Rect rectGlobal = getGlobalVisibleRect(caliMarkerPointImgView[i]);
        		m_posDrawCoordinate[i] = new PointF(rectGlobal.centerX(), rectGlobal.centerY());
        	}
    	}
    	
    	
    	m_posRestultPoint = new PointF[m_nCoordinateResuntPoint];
    	for(int i=0;i<m_nCoordinateResuntPoint;i++){
    		m_posRestultPoint[i] = new PointF();
    	}
    	
    	m_posCoordinate = new PointF[m_nCoordinateResuntPoint];
    	m_posCoordinate[0] = new PointF(0, 0);
    	m_posCoordinate[1] = new PointF(MainDefine.iDisGetWidth, 0);
    	m_posCoordinate[2] = new PointF(MainDefine.iDisGetWidth, MainDefine.iDisGetHeight);
    	m_posCoordinate[3] = new PointF(0, MainDefine.iDisGetHeight);
    	
    	caliShowPopup.setVisibility(View.GONE);
    	reSetCalibration();
	}
    
    public void reSetCalibration(){
    	m_nCoordinateCounter = 0;
    	
    	if(isSmartPenMode){
    		for(int i=0;i<m_nCoordinateDrawPoint;i++){
        		if(i == m_nCoordinateCounter){
        			caliPointImgView[i].setSelected(false);
        			caliPointImgView[i].setVisibility(View.VISIBLE);
        		}else{
        			caliPointImgView[i].setSelected(false);
        		}
        	}
    	}else{
    		for(int i=0;i<m_nCoordinateDrawPoint;i++){
        		if(i == m_nCoordinateCounter){
        			caliMarkerPointImgView[i].setSelected(false);
        			caliMarkerPointImgView[i].setVisibility(View.VISIBLE);
        		}else{
        			caliMarkerPointImgView[i].setSelected(false);
        		}
        	}
    	}
    }
    
    
    public void reTryBtnClicked(View v){
    	if(isNotActivate()) return;
    	
    	reSetCalibration();
    }
    
    public void exitBtnClicked(View v){
    	if(isNotActivate()) return;
    	
    	finishActivityAnim(RESULT_CANCELED,null);
    }
    
    Animation coordinateAni = null;
    Animation popupAni = null;
    
    boolean isAnimation = false;
    boolean isShowMessageBox = false;
    boolean isShowProgress = false;
    boolean isFirstActivitFocus = true;
    
    void setCaliPoint(int position){
    	final int moveIdx = position;
    	
    	if(isSmartPenMode){
    		if(moveIdx < m_nCoordinateDrawPoint){
    	    	coordinateAni = new TranslateAnimation(
    	    			0,
    	    			m_posDrawCoordinate[moveIdx].x-m_posDrawCoordinate[moveIdx-1].x,
    	    			0,
    	    			m_posDrawCoordinate[moveIdx].y-m_posDrawCoordinate[moveIdx-1].y);
    	
    	    	coordinateAni.setDuration(300);
    	    	coordinateAni.setFillAfter(false);
    	
    	    	caliPointImgView[moveIdx-1].startAnimation(coordinateAni);
    	    	coordinateAni.setAnimationListener(new AnimationListener() {
    	    		@Override
    	    		public void onAnimationStart(Animation animation) {
    	    			
    	    		}
    	
    	    		@Override
    	    		public void onAnimationRepeat(Animation animation) {
    	    			
    	    		}
    	
    	    		@Override
    	    		public void onAnimationEnd(Animation animation) {
    	    			
    	    			coordinateAni.cancel();
    	    			caliPointImgView[moveIdx-1].clearAnimation();
    	    			
    	    			caliPointImgView[moveIdx-1].setVisibility(View.GONE);
    	    			
    	    			caliPointImgView[moveIdx].setSelected(true);
    	    			caliPointImgView[moveIdx].setVisibility(View.VISIBLE);
    	    			
    	    			
    	    		}
    	    	});
        	}else{
        		caliPointImgView[moveIdx-1].setVisibility(View.GONE);
        	}
    	}else{
    		if(moveIdx < m_nCoordinateDrawPoint){
    	    	coordinateAni = new TranslateAnimation(
    	    			0,
    	    			m_posDrawCoordinate[moveIdx].x-m_posDrawCoordinate[moveIdx-1].x,
    	    			0,
    	    			m_posDrawCoordinate[moveIdx].y-m_posDrawCoordinate[moveIdx-1].y);
    	
    	    	coordinateAni.setDuration(300);
    	    	coordinateAni.setFillAfter(false);
    	
    	    	caliMarkerPointImgView[moveIdx-1].startAnimation(coordinateAni);
    	    	coordinateAni.setAnimationListener(new AnimationListener() {
    	    		@Override
    	    		public void onAnimationStart(Animation animation) {
    	    			
    	    		}
    	
    	    		@Override
    	    		public void onAnimationRepeat(Animation animation) {
    	    			
    	    		}
    	
    	    		@Override
    	    		public void onAnimationEnd(Animation animation) {
    	    			
    	    			coordinateAni.cancel();
    	    			caliMarkerPointImgView[moveIdx-1].clearAnimation();
    	    			
    	    			caliMarkerPointImgView[moveIdx-1].setVisibility(View.GONE);
    	    			
    	    			caliMarkerPointImgView[moveIdx].setSelected(true);
    	    			caliMarkerPointImgView[moveIdx].setVisibility(View.VISIBLE);
    	    		}
    	    	});
        	}else{
        		caliMarkerPointImgView[moveIdx-1].setVisibility(View.GONE);
        	}
    	}
    	
    	String imgStr = "cali_check_0"+moveIdx;
    	
    	caliShowPopup.setVisibility(View.VISIBLE);
    	caliShowPopup.setImageResource(ResourcesImgNameToId(imgStr));
    	popupAni = AnimationUtils.loadAnimation(this, R.anim.zoom_out_alpha_fast);
		caliShowPopup.startAnimation(popupAni);
		popupAni.setAnimationListener(new AnimationListener() {
    		@Override
    		public void onAnimationStart(Animation animation) {
    			isAnimation = true;
    		}

    		@Override
    		public void onAnimationRepeat(Animation animation) {
    		}

    		@Override
    		public void onAnimationEnd(Animation animation) {
    			isAnimation = false;
    			
    			caliShowPopup.setVisibility(View.GONE);
    			
    			if(moveIdx == m_nCoordinateDrawPoint){
    				showAlertView();
    				
    			}
    		}
    	});
    }
    
    
    
    void showAlertView(){
    	AlertDialog.Builder builder = null;
    	AlertDialog alert = null;
    	
    	builder = new AlertDialog.Builder(CalibrationPointActivity.this);
    	builder.setCancelable(false);
    	
    	builder.setTitle(getResources().getString(R.string.SUBMENU_CALI_MSG_INPUT));
    	
    	builder.setPositiveButton(getResources().getString(R.string.COMMON_APPLY), new DialogInterface.OnClickListener() {
    		public void onClick(DialogInterface dialog, int which) {
    			dialog.dismiss();
    			
    			m_posRestultPoint[1] = new PointF(m_posRestultPoint[2].x,m_posRestultPoint[0].y);
				m_posRestultPoint[3] = new PointF(m_posRestultPoint[0].x,m_posRestultPoint[2].y);

				MainDefine.penController.setCalibrationData(m_posCoordinate ,0 ,m_posRestultPoint);
				
				finishActivityAnim(RESULT_OK ,null);
    		}
    	});
    	builder.setNeutralButton(getResources().getString(R.string.COMMON_RETRY), new DialogInterface.OnClickListener() {
    		public void onClick(DialogInterface dialog, int which) {
    			dialog.dismiss();
    			
    			reSetCalibration();
    		}
    	});
    	builder.setNegativeButton(getResources().getString(R.string.COMMON_CANCEL), new DialogInterface.OnClickListener() {
    		public void onClick(DialogInterface dialog, int which) {
    			dialog.dismiss();
    			
    			finishActivityAnim(RESULT_CANCELED ,null);
    		}
    	});
    	
    	

    	alert = builder.create();
    	alert.show();
	}
    
    /*
     * PEN_DOWN
     * PEN_MOVE
     * PEN_UP
     * PEN_HOVER
     * PEN_HOVER_DOWN
     * PEN_HOVER_MOVE
     */
    @SuppressLint("HandlerLeak")
	Handler penHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			PenDataClass penData = (PenDataClass)msg.obj;
			if(penData != null){
				PenHandlerWithDictionary(penData);
			}
		}
	};
	
	void PenHandlerWithDictionary(PenDataClass penData)
	{
		if(!isHasFocus) return;
		if(isAnimation) return;
		
		if(penData.PenStatus == PNFDefine.PEN_DOWN || penData.PenStatus == PNFDefine.PEN_MOVE)
		{
			if(isSmartPenMode){
				if(m_nCoordinateCounter < m_nCoordinateDrawPoint && !caliPointImgView[m_nCoordinateCounter].isSelected()){
					caliPointImgView[m_nCoordinateCounter].setSelected(true);
				}
			}else{
				if(m_nCoordinateCounter < m_nCoordinateDrawPoint && !caliMarkerPointImgView[m_nCoordinateCounter].isSelected()){
					caliMarkerPointImgView[m_nCoordinateCounter].setSelected(true);
				}
			}
		}else if(penData.PenStatus == PNFDefine.PEN_UP)
		{
			if(m_nCoordinateCounter < m_nCoordinateDrawPoint)							
			{
				if(isSmartPenMode){
//					caliPointImgView[m_nCoordinateCounter].setSelected(false);
//					
//					if(infoData.isStationUP){
//						if(m_nCoordinateCounter == 0){
//							m_posRestultPoint[0] = new PointF(RawX ,RawY);
//						}else if(m_nCoordinateCounter == 1){
//							m_posRestultPoint[2] = new PointF(RawX ,RawY);
//						}
//					}else{
//						if(m_nCoordinateCounter == 0){
//							m_posRestultPoint[2] = new PointF(RawX ,RawY);
//						}else if(m_nCoordinateCounter == 1){
//							m_posRestultPoint[0] = new PointF(RawX ,RawY);
//						}
//					}
//					
					caliPointImgView[m_nCoordinateCounter].setSelected(false);
					if(m_nCoordinateCounter == 0){
						m_posRestultPoint[0] = new PointF(penData.ptRaw.x ,penData.ptRaw.y);
					}else if(m_nCoordinateCounter == 1){
						m_posRestultPoint[2] = new PointF(penData.ptRaw.x ,penData.ptRaw.y);
					}
				}else{
					caliMarkerPointImgView[m_nCoordinateCounter].setSelected(false);
					
					if(m_nCoordinateCounter == 0){
						m_posRestultPoint[0] = new PointF(penData.ptRaw.x ,penData.ptRaw.y);
					}else if(m_nCoordinateCounter == 1){
						m_posRestultPoint[2] = new PointF(penData.ptRaw.x ,penData.ptRaw.y);
					}
				}
				
				m_nCoordinateCounter++;
				setCaliPoint(m_nCoordinateCounter);
			}
		}
	}
	
	boolean isNotActivate(){
		boolean isRtn = false;

//		if(!isHasFocus) isRtn = true;
		if(isAnimation) isRtn = true;
		if(isShowMessageBox) isRtn = true;
		if(isShowProgress) isRtn = true;
		if(isFirstActivitFocus) isRtn = true;

		return isRtn;
	}
    
	void finishActivityAnim(int resultCode ,Intent intent){
		setResult(resultCode, intent);
		finish();
	}
	
	/*
	 * PNF_MSG_INVALID_PROTOCOL
	 * PNF_MSG_FAIL_LISTENING
	 * PNF_MSG_CONNECTING_FAIL
	 * PNF_MSG_CONNECTING
	 * PNF_MSG_CONNECTED
	 * PNF_MSG_PEN_RMD_ERROR
	 * PNF_MSG_FIRST_DATA_RECV
	 * PNF_MSG_FIRST_DATA_ERROR
	 * PNF_MSG_SESSION_CONNECT
	 * PNF_MSG_SESSION_OPEN
	 * PNF_MSG_SESSION_CLOSED
	 * 
	 * GESTURE_RIGHT_LEFT
	 * GESTURE_LEFT_RIGHT
	 * GESTURE_CIRCLE_CLOCKWISE
	 * GESTURE_CIRCLE_COUNTERCLOCKWISE
	 * GESTURE_ZIGZAG
	 * GESTURE_CLICK
	 * GESTURE_DOUBLECLICK
	 * 
	 * PEN_E_NOT_CONNECTED
	 * PEN_E_INVALID_PROTOCOL
	 * PEN_E_FAIL_LISTENING
	 */
	@SuppressLint("HandlerLeak")
	Handler messageHandler = new Handler() 
	{        
		@Override
		public void handleMessage(Message msg) 
		{
			FreeLogMsg(msg.what);
		}
	};
	
	void FreeLogMsg(int what)
	{
		if(what == PNFDefine.PNF_MSG_FAIL_LISTENING){
			finishActivityAnim(RESULT_CANCELED,null);
		}
	}
	
	/*
	 * 
	 * BATTERY_INFO
	 * NEW_PAGE
	 * DUPLICATE_PAGE
	 * CHANGE_DEVECE_POSITION
	 * CHANGE_DEVECE_POSITION_FIRST
	 * 
	 */
	@SuppressLint("HandlerLeak")
	Handler PenHandlerFunc = new Handler() 
	{
		@Override
		public void handleMessage(Message msg) 
		{
			onPenFuncEvent(msg.what ,msg.arg1 ,msg.arg2);
		}
	};
	
	void onPenFuncEvent(int what ,int batteryStation ,int batteryPen)
	{
		if(what == PNFDefine.CHANGE_DEVECE_POSITION ||
				what == PNFDefine.CHANGE_DEVECE_POSITION_FIRST){
			int stationPostion = MainDefine.penController.getStationPostion();

			if(markerStationPosition != stationPostion){
				ChangeStation();
				reSetCalibration();
			}
		}
	}
	
	Rect getGlobalVisibleRect(View view){
		Rect r = new Rect();
		view.getGlobalVisibleRect(r);
		return r;
	}
	
	int ResourcesImgNameToId(String idName){
		if(idName.contains(".png")){
			idName = idName.substring(0, idName.lastIndexOf("."));
		}
		return getResources().getIdentifier(idName, "drawable", getPackageName());
	}
	
	int ResourcesIdNameToId(String imgName){
		return getResources().getIdentifier(imgName, "id", getPackageName());
	}
}